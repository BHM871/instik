START TRANSACTION;

CREATE TABLE IF NOT EXISTS user (
	id INTEGER PRIMARY KEY AUTO_INCREMENT,
	email VARCHAR(90) UNIQUE NOT NULL,
	`password` VARCHAR(120) NOT NULL,
	username VARCHAR(100) DEFAULT NULL,
	created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
	is_valid TINYINT NOT NULL DEFAULT 0,
	hash_change_password VARCHAR(150) NULL DEFAULT NULL
);

CREATE TABLE IF NOT EXISTS follow (
	id INTEGER PRIMARY KEY AUTO_INCREMENT,
	follow_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
	id_followed INTEGER NOT NULL,
	id_follower INTEGER NOT NULL,
	FOREIGN KEY (id_followed) REFERENCES user(id),
	FOREIGN KEY (id_follower) REFERENCES user(id)
);

CREATE TABLE IF NOT EXISTS notify (
	id INTEGER PRIMARY KEY AUTO_INCREMENT,
	notify_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
	content VARCHAR(512) NOT NULL,
	`type` ENUM('follower', 'comment', 'answer'),
	id_notified INTEGER NOT NULL,
	FOREIGN KEY (id_notified) REFERENCES user(id)
);





CREATE TABLE IF NOT EXISTS post (
	id INTEGER PRIMARY KEY AUTO_INCREMENT,
	posted_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
	caption VARCHAR(1536) DEFAULT '',
	image_path VARCHAR(255) UNIQUE DEFAULT NULL,
	`like` INTEGER DEFAULT 0,
	id_publicher INTEGER NOT NULL,
	FOREIGN KEY (id_publicher) REFERENCES user(id)
);

CREATE TABLE IF NOT EXISTS `like` (
	id INTEGER PRIMARY KEY AUTO_INCREMENT,
	like_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
	id_liker INTEGER NOT NULL,
	id_post INTEGER NOT NULL,
	FOREIGN KEY (id_liker) REFERENCES user(id),
	FOREIGN KEY (id_post) REFERENCES post(id)
);





CREATE TABLE IF NOT EXISTS comment (
	id INTEGER PRIMARY KEY AUTO_INCREMENT,
	comment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
	content VARCHAR(1536) NOT NULL,
	id_commenter INTEGER NOT NULL,
	id_post INTEGER NOT NULL,
	FOREIGN KEY (id_commenter) REFERENCES user(id),
	FOREIGN KEY (id_post) REFERENCES post(id)
);





CREATE TABLE IF NOT EXISTS answer (
	id INTEGER PRIMARY KEY AUTO_INCREMENT,
	answer_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
	content VARCHAR(1536) NOT NULL,
	id_answer INTEGER NOT NULL,
	id_comment INTEGER NOT NULL,
	FOREIGN KEY (id_answer) REFERENCES user(id),
	FOREIGN KEY (id_comment) REFERENCES comment(id)
);

COMMIT;